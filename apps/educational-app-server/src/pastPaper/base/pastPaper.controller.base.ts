/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PastPaperService } from "../pastPaper.service";
import { PastPaperCreateInput } from "./PastPaperCreateInput";
import { PastPaper } from "./PastPaper";
import { PastPaperFindManyArgs } from "./PastPaperFindManyArgs";
import { PastPaperWhereUniqueInput } from "./PastPaperWhereUniqueInput";
import { PastPaperUpdateInput } from "./PastPaperUpdateInput";

export class PastPaperControllerBase {
  constructor(protected readonly service: PastPaperService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PastPaper })
  async createPastPaper(
    @common.Body() data: PastPaperCreateInput
  ): Promise<PastPaper> {
    return await this.service.createPastPaper({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        subject: true,
        year: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PastPaper] })
  @ApiNestedQuery(PastPaperFindManyArgs)
  async pastPapers(@common.Req() request: Request): Promise<PastPaper[]> {
    const args = plainToClass(PastPaperFindManyArgs, request.query);
    return this.service.pastPapers({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        subject: true,
        year: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PastPaper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pastPaper(
    @common.Param() params: PastPaperWhereUniqueInput
  ): Promise<PastPaper | null> {
    const result = await this.service.pastPaper({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        content: true,
        subject: true,
        year: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PastPaper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePastPaper(
    @common.Param() params: PastPaperWhereUniqueInput,
    @common.Body() data: PastPaperUpdateInput
  ): Promise<PastPaper | null> {
    try {
      return await this.service.updatePastPaper({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          subject: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PastPaper })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePastPaper(
    @common.Param() params: PastPaperWhereUniqueInput
  ): Promise<PastPaper | null> {
    try {
      return await this.service.deletePastPaper({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          title: true,
          content: true,
          subject: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
