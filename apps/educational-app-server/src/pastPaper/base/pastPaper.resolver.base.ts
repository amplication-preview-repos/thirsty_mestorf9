/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PastPaper } from "./PastPaper";
import { PastPaperCountArgs } from "./PastPaperCountArgs";
import { PastPaperFindManyArgs } from "./PastPaperFindManyArgs";
import { PastPaperFindUniqueArgs } from "./PastPaperFindUniqueArgs";
import { CreatePastPaperArgs } from "./CreatePastPaperArgs";
import { UpdatePastPaperArgs } from "./UpdatePastPaperArgs";
import { DeletePastPaperArgs } from "./DeletePastPaperArgs";
import { PastPaperService } from "../pastPaper.service";
@graphql.Resolver(() => PastPaper)
export class PastPaperResolverBase {
  constructor(protected readonly service: PastPaperService) {}

  async _pastPapersMeta(
    @graphql.Args() args: PastPaperCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PastPaper])
  async pastPapers(
    @graphql.Args() args: PastPaperFindManyArgs
  ): Promise<PastPaper[]> {
    return this.service.pastPapers(args);
  }

  @graphql.Query(() => PastPaper, { nullable: true })
  async pastPaper(
    @graphql.Args() args: PastPaperFindUniqueArgs
  ): Promise<PastPaper | null> {
    const result = await this.service.pastPaper(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PastPaper)
  async createPastPaper(
    @graphql.Args() args: CreatePastPaperArgs
  ): Promise<PastPaper> {
    return await this.service.createPastPaper({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PastPaper)
  async updatePastPaper(
    @graphql.Args() args: UpdatePastPaperArgs
  ): Promise<PastPaper | null> {
    try {
      return await this.service.updatePastPaper({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PastPaper)
  async deletePastPaper(
    @graphql.Args() args: DeletePastPaperArgs
  ): Promise<PastPaper | null> {
    try {
      return await this.service.deletePastPaper(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
