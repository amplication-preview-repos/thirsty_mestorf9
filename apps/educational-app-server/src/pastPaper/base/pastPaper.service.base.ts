/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PastPaper as PrismaPastPaper } from "@prisma/client";

export class PastPaperServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PastPaperCountArgs, "select">
  ): Promise<number> {
    return this.prisma.pastPaper.count(args);
  }

  async pastPapers(
    args: Prisma.PastPaperFindManyArgs
  ): Promise<PrismaPastPaper[]> {
    return this.prisma.pastPaper.findMany(args);
  }
  async pastPaper(
    args: Prisma.PastPaperFindUniqueArgs
  ): Promise<PrismaPastPaper | null> {
    return this.prisma.pastPaper.findUnique(args);
  }
  async createPastPaper(
    args: Prisma.PastPaperCreateArgs
  ): Promise<PrismaPastPaper> {
    return this.prisma.pastPaper.create(args);
  }
  async updatePastPaper(
    args: Prisma.PastPaperUpdateArgs
  ): Promise<PrismaPastPaper> {
    return this.prisma.pastPaper.update(args);
  }
  async deletePastPaper(
    args: Prisma.PastPaperDeleteArgs
  ): Promise<PrismaPastPaper> {
    return this.prisma.pastPaper.delete(args);
  }
}
