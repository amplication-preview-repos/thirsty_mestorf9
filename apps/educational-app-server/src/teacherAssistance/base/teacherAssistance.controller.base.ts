/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TeacherAssistanceService } from "../teacherAssistance.service";
import { TeacherAssistanceCreateInput } from "./TeacherAssistanceCreateInput";
import { TeacherAssistance } from "./TeacherAssistance";
import { TeacherAssistanceFindManyArgs } from "./TeacherAssistanceFindManyArgs";
import { TeacherAssistanceWhereUniqueInput } from "./TeacherAssistanceWhereUniqueInput";
import { TeacherAssistanceUpdateInput } from "./TeacherAssistanceUpdateInput";

export class TeacherAssistanceControllerBase {
  constructor(protected readonly service: TeacherAssistanceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TeacherAssistance })
  async createTeacherAssistance(
    @common.Body() data: TeacherAssistanceCreateInput
  ): Promise<TeacherAssistance> {
    return await this.service.createTeacherAssistance({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        specialty: true,
        availability: true,
        contact: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TeacherAssistance] })
  @ApiNestedQuery(TeacherAssistanceFindManyArgs)
  async teacherAssistances(
    @common.Req() request: Request
  ): Promise<TeacherAssistance[]> {
    const args = plainToClass(TeacherAssistanceFindManyArgs, request.query);
    return this.service.teacherAssistances({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        specialty: true,
        availability: true,
        contact: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TeacherAssistance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async teacherAssistance(
    @common.Param() params: TeacherAssistanceWhereUniqueInput
  ): Promise<TeacherAssistance | null> {
    const result = await this.service.teacherAssistance({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        specialty: true,
        availability: true,
        contact: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TeacherAssistance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTeacherAssistance(
    @common.Param() params: TeacherAssistanceWhereUniqueInput,
    @common.Body() data: TeacherAssistanceUpdateInput
  ): Promise<TeacherAssistance | null> {
    try {
      return await this.service.updateTeacherAssistance({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          specialty: true,
          availability: true,
          contact: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TeacherAssistance })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTeacherAssistance(
    @common.Param() params: TeacherAssistanceWhereUniqueInput
  ): Promise<TeacherAssistance | null> {
    try {
      return await this.service.deleteTeacherAssistance({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          specialty: true,
          availability: true,
          contact: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
