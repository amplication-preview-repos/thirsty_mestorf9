/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TeacherAssistance } from "./TeacherAssistance";
import { TeacherAssistanceCountArgs } from "./TeacherAssistanceCountArgs";
import { TeacherAssistanceFindManyArgs } from "./TeacherAssistanceFindManyArgs";
import { TeacherAssistanceFindUniqueArgs } from "./TeacherAssistanceFindUniqueArgs";
import { CreateTeacherAssistanceArgs } from "./CreateTeacherAssistanceArgs";
import { UpdateTeacherAssistanceArgs } from "./UpdateTeacherAssistanceArgs";
import { DeleteTeacherAssistanceArgs } from "./DeleteTeacherAssistanceArgs";
import { TeacherAssistanceService } from "../teacherAssistance.service";
@graphql.Resolver(() => TeacherAssistance)
export class TeacherAssistanceResolverBase {
  constructor(protected readonly service: TeacherAssistanceService) {}

  async _teacherAssistancesMeta(
    @graphql.Args() args: TeacherAssistanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TeacherAssistance])
  async teacherAssistances(
    @graphql.Args() args: TeacherAssistanceFindManyArgs
  ): Promise<TeacherAssistance[]> {
    return this.service.teacherAssistances(args);
  }

  @graphql.Query(() => TeacherAssistance, { nullable: true })
  async teacherAssistance(
    @graphql.Args() args: TeacherAssistanceFindUniqueArgs
  ): Promise<TeacherAssistance | null> {
    const result = await this.service.teacherAssistance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TeacherAssistance)
  async createTeacherAssistance(
    @graphql.Args() args: CreateTeacherAssistanceArgs
  ): Promise<TeacherAssistance> {
    return await this.service.createTeacherAssistance({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => TeacherAssistance)
  async updateTeacherAssistance(
    @graphql.Args() args: UpdateTeacherAssistanceArgs
  ): Promise<TeacherAssistance | null> {
    try {
      return await this.service.updateTeacherAssistance({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeacherAssistance)
  async deleteTeacherAssistance(
    @graphql.Args() args: DeleteTeacherAssistanceArgs
  ): Promise<TeacherAssistance | null> {
    try {
      return await this.service.deleteTeacherAssistance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
